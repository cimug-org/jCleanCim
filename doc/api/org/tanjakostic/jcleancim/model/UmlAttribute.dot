#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6_6-6-g3bdff0 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.tanjakostic.jcleancim.model.UmlAttribute
	c183563 [label=<<table title="org.tanjakostic.jcleancim.model.UmlAttribute" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./UmlAttribute.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UmlAttribute </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _logger : Logger </td></tr>
<tr><td align="left" balign="left"> - IEC61850_TAGS : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> - CIM_TAGS : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> - CIM_PROFILE_TAGS : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + DO_MAX_LENGTH : int </td></tr>
<tr><td align="left" balign="left"> - _containingClass : UmlClass </td></tr>
<tr><td align="left" balign="left"> - _type : UmlClass </td></tr>
<tr><td align="left" balign="left"> - _data : UmlAttribute.Data </td></tr>
<tr><td align="left" balign="left"> - _kind : UmlKind </td></tr>
<tr><td align="left" balign="left"> - _valueRange : ValueRange </td></tr>
<tr><td align="left" balign="left"> - _initValueAsInteger : Integer </td></tr>
<tr><td align="left" balign="left"> - _ownConstraints : List&lt;UmlConstraint&gt; </td></tr>
<tr><td align="left" balign="left"> - _presConditions : List&lt;PresenceCondition&gt; </td></tr>
<tr><td align="left" balign="left"> - _decomposedTerms : NameDecomposition </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ UmlAttribute(containingClass : UmlClass, type : UmlClass, objData : UmlObjectData, data : UmlAttribute.Data) </td></tr>
<tr><td align="left" balign="left"> + getKinds(nature : Nature) : List&lt;UmlKind&gt; </td></tr>
<tr><td align="left" balign="left"> + findEnumLiterals(attributes : Collection&lt;UmlAttribute&gt;) : Collection&lt;UmlAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> + findAbbreviationLiterals(attributes : Collection&lt;UmlAttribute&gt;) : Collection&lt;UmlAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> + findPresenceConditionLiterals(attributes : Collection&lt;UmlAttribute&gt;) : Collection&lt;UmlAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> ~ basic(containingClass : UmlClass, type : UmlClass, name : String) : UmlAttribute </td></tr>
<tr><td align="left" balign="left"> ~ basicLiteral(containingClass : UmlClass, name : String) : UmlAttribute </td></tr>
<tr><td align="left" balign="left"> ~ basic(containingClass : UmlClass, type : UmlClass, name : String, mult : UmlMultiplicity) : UmlAttribute </td></tr>
<tr><td align="left" balign="left"> ~ basic(containingClass : UmlClass, type : UmlClass, name : String, initVal : String) : UmlAttribute </td></tr>
<tr><td align="left" balign="left"> - determineKind(containingClass : UmlClass, type : UmlClass) : UmlAttribute.Kind </td></tr>
<tr><td align="left" balign="left"> - initValueRange(initValue : String) : ValueRange </td></tr>
<tr><td align="left" balign="left"> - initInitialValueAsInteger(initValue : String) : Integer </td></tr>
<tr><td align="left" balign="left"> + getContainingClass() : UmlClass </td></tr>
<tr><td align="left" balign="left"> + getType() : UmlClass </td></tr>
<tr><td align="left" balign="left"> + isConst() : boolean </td></tr>
<tr><td align="left" balign="left"> + isStatic() : boolean </td></tr>
<tr><td align="left" balign="left"> + getMultiplicity() : UmlMultiplicity </td></tr>
<tr><td align="left" balign="left"> + getInitValue() : String </td></tr>
<tr><td align="left" balign="left"> + getInitValueWithPotentialOverrideForSCL() : String </td></tr>
<tr><td align="left" balign="left"> + getEaTypeId() : int </td></tr>
<tr><td align="left" balign="left"> + getEaTypeName() : String </td></tr>
<tr><td align="left" balign="left"> + getEaTypeInfo() : String </td></tr>
<tr><td align="left" balign="left"> + hasSuperfluousType() : boolean </td></tr>
<tr><td align="left" balign="left"> + isOptional() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMultivalued() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPublic() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLiteral() : boolean </td></tr>
<tr><td align="left" balign="left"> + isDO() : boolean </td></tr>
<tr><td align="left" balign="left"> + getPresConditions() : List&lt;PresenceCondition&gt; </td></tr>
<tr><td align="left" balign="left"> ~ getConstraintsFromClass() : List&lt;UmlConstraint&gt; </td></tr>
<tr><td align="left" balign="left"> + isConditional() : boolean </td></tr>
<tr><td align="left" balign="left"> + getDsPresConditions(context : UmlClass) : List&lt;PresenceCondition&gt; </td></tr>
<tr><td align="left" balign="left"> + getNameDecomposition() : NameDecomposition </td></tr>
<tr><td align="left" balign="left"> + getNameDecomposition(sortedAbbrTerms : Map&lt;String, String&gt;) : NameDecomposition </td></tr>
<tr><td align="left" balign="left"> + addOwnConstraint(objData : UmlObjectData, data : UmlConstraint.Data) : UmlConstraint </td></tr>
<tr><td align="left" balign="left"> + getOwnConstraints() : List&lt;UmlConstraint&gt; </td></tr>
<tr><td align="left" balign="left"> + getArrayBounds() : String </td></tr>
<tr><td align="left" balign="left"> + getArrayBoundsWithBrackets() : String </td></tr>
<tr><td align="left" balign="left"> + getConstraintValues() : Map&lt;String, String&gt; </td></tr>
<tr><td align="left" balign="left"> ~ hasInitialValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasValueRange() : boolean </td></tr>
<tr><td align="left" balign="left"> + getValueRange() : ValueRange </td></tr>
<tr><td align="left" balign="left"> + hasConstValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasDefaultValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + getInitialValueAsInteger() : Integer </td></tr>
<tr><td align="left" balign="left"> + hasInitialValueAsInteger() : boolean </td></tr>
<tr><td align="left" balign="left"> + getSiblingToMoveAfter() : UmlAttribute </td></tr>
<tr><td align="left" balign="left"> + displayEmptyValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + getAllSiblings() : Collection&lt;UmlAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> + getOwner() : OwningWg </td></tr>
<tr><td align="left" balign="left"> + getNamespace() : Namespace </td></tr>
<tr><td align="left" balign="left"> + getNature() : Nature </td></tr>
<tr><td align="left" balign="left"> + isInformative() : boolean </td></tr>
<tr><td align="left" balign="left"> + getKind() : UmlKind </td></tr>
<tr><td align="left" balign="left"> + getQualifiedName() : String </td></tr>
<tr><td align="left" balign="left"> + getPredefinedTagNames() : Set&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./UmlAttribute.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// org.tanjakostic.jcleancim.model.AbstractUmlObject
	c183582 [label=<<table title="org.tanjakostic.jcleancim.model.AbstractUmlObject" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./AbstractUmlObject.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Arial Italic"> AbstractUmlObject </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _logger : Logger </td></tr>
<tr><td align="left" balign="left"> + NULL_OBJ_NAME : String </td></tr>
<tr><td align="left" balign="left"> + PACKAGE_SEPARATOR : String </td></tr>
<tr><td align="left" balign="left"> + CLASS_SEPARATOR : String </td></tr>
<tr><td align="left" balign="left"> - _objData : UmlObjectData </td></tr>
<tr><td align="left" balign="left"> - _taggedValues : Map&lt;String, String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # AbstractUmlObject(objData : UmlObjectData) </td></tr>
<tr><td align="left" balign="left"> + collectNames(objects : Collection&lt;T&gt;) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + collectQNames(objects : Collection&lt;T&gt;, includeOwner : boolean) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + collectDuplicateNames(objects : Collection&lt;T&gt;) : MapOfCollections&lt;String, T&gt; </td></tr>
<tr><td align="left" balign="left"> + findAllForName(objects : Collection&lt;T&gt;, name : String) : Set&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + collectDuplicateDescriptions(objects : Collection&lt;T&gt;) : MapOfCollections&lt;String, T&gt; </td></tr>
<tr><td align="left" balign="left"> + classifyPerScope(objects : Collection&lt;T&gt;, scope : EnumSet&lt;OwningWg&gt;) : Map&lt;OwningWg, Collection&lt;T&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + collectForScope(objects : Collection&lt;T&gt;, scope : EnumSet&lt;OwningWg&gt;) : List&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + classifyPerScopePerTag(tags : Map&lt;String, Set&lt;T&gt;&gt;, scope : EnumSet&lt;OwningWg&gt;) : Map&lt;OwningWg, Map&lt;String, Set&lt;T&gt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + classifyPerTag(tags : Map&lt;String, Set&lt;T&gt;&gt;, scope : EnumSet&lt;OwningWg&gt;) : Map&lt;String, Set&lt;T&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + saveTags(o : UmlObject, destination : Map&lt;String, Set&lt;UmlObject&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + findWithSameUuidAndLog(level : Level, asker : UmlObject, objects : Collection&lt;T&gt;, uuid : String) : T </td></tr>
<tr><td align="left" balign="left"> + addDeprecAndInf(o : UmlObject) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + appendRemainingCustomStereotypes(tokens : List&lt;String&gt;, o : UmlObject, builtins : Map&lt;Nature, Set&lt;String&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + getId() : Integer </td></tr>
<tr><td align="left" balign="left"> + getUuid() : String </td></tr>
<tr><td align="left" balign="left"> + getSince() : String </td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getOwner() : OwningWg </font></td></tr>
<tr><td align="left" balign="left"> # initFromTags() : Namespace </td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getNature() : Nature </font></td></tr>
<tr><td align="left" balign="left"> + isInformative() : boolean </td></tr>
<tr><td align="left" balign="left"> + getVisibility() : UmlVisibility </td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getKind() : UmlKind </font></td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getAlias() : String </td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getQualifiedName() : String </font></td></tr>
<tr><td align="left" balign="left"> + toShortString(includeId : boolean, isNameQualified : boolean) : String </td></tr>
<tr><td align="left" balign="left"> # toShortString(includeId : boolean, qualifier : String, isNameQualified : boolean) : String </td></tr>
<tr><td align="left" balign="left"> - wrapToStringIfNull(o : Object) : String </td></tr>
<tr><td align="left" balign="left"> + getDescription() : TextDescription </td></tr>
<tr><td align="left" balign="left"> + getHtmlDescription() : TextDescription </td></tr>
<tr><td align="left" balign="left"> + getStereotype() : UmlStereotype </td></tr>
<tr><td align="left" balign="left"> + isDeprecated() : boolean </td></tr>
<tr><td align="left" balign="left"> + getUnallowedTagNames() : Set&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + addTaggedValue(name : String, value : String) : String </td></tr>
<tr><td align="left" balign="left"> # validateTag(name : String, value : String) </td></tr>
<tr><td align="left" balign="left"> + getTaggedValues() : Map&lt;String, String&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./AbstractUmlObject.html", fontname="arial", fontcolor="black", fontsize=10.0];
	//org.tanjakostic.jcleancim.model.UmlAttribute extends org.tanjakostic.jcleancim.model.AbstractUmlObject
	c183582:p -> c183563:p [dir=back,arrowtail=empty];
}

