#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6_6-6-g3bdff0 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.tanjakostic.jcleancim.util.Util
	c202740 [label=<<table title="org.tanjakostic.jcleancim.util.Util" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Util.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Util </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _logger : Logger </td></tr>
<tr><td align="left" balign="left"> ~ WINDOWS : boolean </td></tr>
<tr><td align="left" balign="left"> + INDENT_COUNT : int </td></tr>
<tr><td align="left" balign="left"> + NL : String </td></tr>
<tr><td align="left" balign="left"> + FILE_SEP : String </td></tr>
<tr><td align="left" balign="left"> + PATH_SEP : String </td></tr>
<tr><td align="left" balign="left"> + USER_DIR_KEY : String </td></tr>
<tr><td align="left" balign="left"> + USER_DIR : String </td></tr>
<tr><td align="left" balign="left"> + TRUNCATE_GREATER_THAN : int </td></tr>
<tr><td align="left" balign="left"> + TOKEN_DELIMITTER : char </td></tr>
<tr><td align="left" balign="left"> + EN_DASH : char </td></tr>
<tr><td align="left" balign="left"> + NON_BREAKING_WHITE_SPACE : char </td></tr>
<tr><td align="left" balign="left"> ~ UC_THETA : String </td></tr>
<tr><td align="left" balign="left"> ~ LC_THETA : String </td></tr>
<tr><td align="left" balign="left"> ~ LC_OMEGA : String </td></tr>
<tr><td align="left" balign="left"> ~ LC_PHI : String </td></tr>
<tr><td align="left" balign="left"> ~ SINGULAR_ENDS : Set&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + ZERO : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Util() </td></tr>
<tr><td align="left" balign="left"> + splitCommaSeparatedTokens(input : String) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + splitCharSeparatedTokens(input : String, c : char) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + splitLines(input : String, compact : boolean) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + splitStringSeparatedTokens(input : String, separator : String) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + concatCharSeparatedTokens(separator : String, tokens : List&lt;String&gt;) : String </td></tr>
<tr><td align="left" balign="left"> + toCsvRecord(separatorChar : char, delimitTokens : boolean, tokens : List&lt;String&gt;) : String </td></tr>
<tr><td align="left" balign="left"> + concatStringSeparatedTokens(separator : String, delimitTokens : boolean, tokens : List&lt;String&gt;) : String </td></tr>
<tr><td align="left" balign="left"> - enclose(sb : StringBuilder, content : String, delimitTokens : boolean) : StringBuilder </td></tr>
<tr><td align="left" balign="left"> + fillString(count : int, ch : char) : String </td></tr>
<tr><td align="left" balign="left"> + truncateEnd(input : String) : String </td></tr>
<tr><td align="left" balign="left"> + truncateEnd(input : String, charCount : int) : String </td></tr>
<tr><td align="left" balign="left"> + truncateStart(input : String) : String </td></tr>
<tr><td align="left" balign="left"> + truncateStart(input : String, charCount : int) : String </td></tr>
<tr><td align="left" balign="left"> + getIndentSpaces(count : int) : String </td></tr>
<tr><td align="left" balign="left"> + getNonBreakingSpaces(count : int) : String </td></tr>
<tr><td align="left" balign="left"> + hasContent(value : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + capitalise(input : String) : String </td></tr>
<tr><td align="left" balign="left"> + sortByDecreasingLength(items : String[]) : String[] </td></tr>
<tr><td align="left" balign="left"> + sortByDecreasingLength(items : Map&lt;String, T&gt;) : Map&lt;String, T&gt; </td></tr>
<tr><td align="left" balign="left"> + looksLikePlural(token : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + parseInt(intStr : String) : Integer </td></tr>
<tr><td align="left" balign="left"> + parseIntZero(intStr : String) : Integer </td></tr>
<tr><td align="left" balign="left"> + null2empty(s : String) : String </td></tr>
<tr><td align="left" balign="left"> + createKeyValuePair(key : K, value : V) : Map&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getKeysByValue(map : Map&lt;K, V&gt;, value : V) : Set&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> + getKeyByValue(map : Map&lt;K, V&gt;, value : V) : K </td></tr>
<tr><td align="left" balign="left"> + initPropsFromFile(propsFileName : String) : Properties </td></tr>
<tr><td align="left" balign="left"> + getResourceAbsPath(resourceName : String, detail : String) : String </td></tr>
<tr><td align="left" balign="left"> - findResource(resourceName : String, detail : String) : File </td></tr>
<tr><td align="left" balign="left"> + findResourceOnClasspath(resourceName : String) : InputStream </td></tr>
<tr><td align="left" balign="left"> + listFiles(directory : File, filter : FilenameFilter, recurse : boolean) : List&lt;File&gt; </td></tr>
<tr><td align="left" balign="left"> + splitDirAndFileNames(basePath : String, relPath : String) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutputFileRenameIfExists(outDirName : String, outFileName : String) : File </td></tr>
<tr><td align="left" balign="left"> + getFileExtension(filePath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getFileExtensionWithDot(filePath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getDirectory(dirRelPath : String, createIfMissing : boolean) : File </td></tr>
<tr><td align="left" balign="left"> + copy(src : File, dst : File) </td></tr>
<tr><td align="left" balign="left"> + delete(f : File) </td></tr>
<tr><td align="left" balign="left"> + saveToFile(filePath : String, content : String) : File </td></tr>
<tr><td align="left" balign="left"> + createTempImageFile(dirAbsPath : String, fileName : String, format : Util.ImageFormat, deleteOnExit : boolean) : File </td></tr>
<tr><td align="left" balign="left"> + clearClipboard() </td></tr>
<tr><td align="left" balign="left"> + copyTextToClipboard(txt : String) </td></tr>
<tr><td align="left" balign="left"> + copyHtmlToClipboard(htmlBody : String) </td></tr>
<tr><td align="left" balign="left"> + fetchTextFromClipboard() : String </td></tr>
<tr><td align="left" balign="left"> + copyImageToClipboard(pic : File) </td></tr>
<tr><td align="left" balign="left"> + saveImageFromClipboard(pic : File) </td></tr>
<tr><td align="left" balign="left"> + formatDuration(millis : long) : String </td></tr>
<tr><td align="left" balign="left"> + ensureNotNull(arg : Object, name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : String, name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : Map&lt;?, ?&gt;, name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : Collection&lt;?&gt;, name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : boolean[], name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : Object[], name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureContainsNoNull(arg : Object[], name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureContainsNoNull(arg : Collection&lt;?&gt;, name : String) </td></tr>
<tr><td align="left" balign="left"> + ensureNotEmpty(arg : int[], name : String) </td></tr>
<tr><td align="left" balign="left"> + logTitle(level : Level, title : String[]) </td></tr>
<tr><td align="left" balign="left"> + logSubtitle(level : Level, subtitle : String) </td></tr>
<tr><td align="left" balign="left"> + logCompletion(level : Level, text : String, startMillis : long, skipTime : boolean) </td></tr>
<tr><td align="left" balign="left"> + logCollection(level : Level, objects : Collection&lt;T&gt;, what : String) </td></tr>
<tr><td align="left" balign="left"> + logMap(level : Level, objects : Map&lt;T, ?&gt;, what : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./Util.html", fontname="arial", fontcolor="black", fontsize=10.0];
}

