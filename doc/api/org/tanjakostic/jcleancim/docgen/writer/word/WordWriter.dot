#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6_6-6-g3bdff0 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.tanjakostic.jcleancim.docgen.writer.Writer
	c209919 [label=<<table title="org.tanjakostic.jcleancim.docgen.writer.Writer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Writer.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Writer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TOOL_CUSTOM_DOC_PROP : String </td></tr>
<tr><td align="left" balign="left"> + UML_CUSTOM_DOC_PROP : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getInput() : WriterInput </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getInputFileNames() : String </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getOutputFileNames() : String </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getSupportedFormats() : Set&lt;String&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + getDocumentMetadata() : Map&lt;String, String&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + write() </font></td></tr>
		</table></td></tr>
		</table>>, URL="../Writer.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// org.tanjakostic.jcleancim.docgen.writer.word.WordWriter<O>
	c209935 [label=<<table title="org.tanjakostic.jcleancim.docgen.writer.word.WordWriter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./WordWriter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> WordWriter&lt;O&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writePackage(initCursor : Cursor&lt;O&gt;, doc : PackageDoc, isRoot : boolean) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeDataIndex(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeLnMapPackage(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writePresCondTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeFcTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeTrgOpTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeAbbrTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeSclEnum(cursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeExplicitClass(cursor : Cursor&lt;O&gt;, doc : ClassDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeClassFromPackage(cursor : Cursor&lt;O&gt;, doc : ClassDoc, headStyle : Style) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeProperties(initCursor : Cursor&lt;O&gt;, doc : PropertiesDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + writeDiagram(cursor : Cursor&lt;O&gt;, doc : FigureDoc) : Cursor&lt;O&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Arial Italic" point-size="10.0"> + applyCloseReopen() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="./WordWriter.html", fontname="arial", fontcolor="black", fontsize=10.0];
	// org.tanjakostic.jcleancim.docgen.writer.word.AbstractWordWriter<O>
	c209939 [label=<<table title="org.tanjakostic.jcleancim.docgen.writer.word.AbstractWordWriter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./AbstractWordWriter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Arial Italic"> AbstractWordWriter&lt;O&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _logger : Logger </td></tr>
<tr><td align="left" balign="left"> - _input : WordWriterInput </td></tr>
<tr><td align="left" balign="left"> - _cursors : CursorList&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> - _closeReopenEveryCounter : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # AbstractWordWriter(input : WordWriterInput) </td></tr>
<tr><td align="left" balign="left"> - copyTemplateAsOutput(src : File, dst : File) </td></tr>
<tr><td align="left" balign="left"> - doIt(readOnly : boolean, pp : WordHelper.PostProcessor) </td></tr>
<tr><td align="left" balign="left"> - logReplacementFailures() </td></tr>
<tr><td align="left" balign="left"> + createWordApp() </td></tr>
<tr><td align="left" balign="left"> + getWordAppName() : String </td></tr>
<tr><td align="left" balign="left"> + getWordAppVersion() : String </td></tr>
<tr><td align="left" balign="left"> + exitAppAndSaveDocument() </td></tr>
<tr><td align="left" balign="left"> + initDocgenOptimisationOptions() </td></tr>
<tr><td align="left" balign="left"> + setDocgenOptimisationOptions() </td></tr>
<tr><td align="left" balign="left"> + unsetDocgenOptimisationOptions() </td></tr>
<tr><td align="left" balign="left"> - updateAllFields(skipTiming : boolean) </td></tr>
<tr><td align="left" balign="left"> - collectFigureAndTableCaptionRanges(figCaptionRanges : List&lt;Range&lt;O&gt;&gt;, tabCaptionRanges : List&lt;Range&lt;O&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + scanPlaceholderRanges(pattern : String, figCaptionRanges : List&lt;Range&lt;O&gt;&gt;, tabCaptionRanges : List&lt;Range&lt;O&gt;&gt;) : CursorList&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + scanHyperlinkPlaceholderRanges(pattern : String) : CursorList&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> - insertDocIntoPlaceholders() </td></tr>
<tr><td align="left" balign="left"> - logCaughtExceptionFromWord(e : Exception) </td></tr>
<tr><td align="left" balign="left"> - insertHyperlinksIntoHyperlinksPlaceholders(cursors : CursorList&lt;O&gt;) </td></tr>
<tr><td align="left" balign="left"> - determineTextForAttributePh(phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> - determineTextForIec61850NsNamePh(phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> - determineTextForDiagramPhAndInsertDiagram(range : Range&lt;O&gt;, phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> - determineTextForDiagNote(phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> - determineTextForPackagePh(phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> - determineTextForClassPh(phSpec : PlaceholderSpec) : String </td></tr>
<tr><td align="left" balign="left"> # pointForPerc(perc : int) : double </td></tr>
<tr><td align="left" balign="left"> + clearUndoCache() </td></tr>
<tr><td align="left" balign="left"> + writeByTest(pp : WordHelper.PostProcessor) </td></tr>
<tr><td align="left" balign="left"> + getCursors() : CursorList&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + isInTOC(range : Range&lt;O&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + createCursor(ph : Placeholder, limited : Range&lt;O&gt;) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + createCaption(figure : CaptionKind, range : Range&lt;O&gt;) : Caption&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + closeAndReopenDoc(cursors : CursorList&lt;O&gt;, currentCursor : Cursor&lt;O&gt;) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + appendTextInNewParagraphWithStyle(range : Range&lt;O&gt;, newText : TextDescription, style : Style) : String </td></tr>
<tr><td align="left" balign="left"> + writePackage(initCursor : Cursor&lt;O&gt;, doc : PackageDoc, isRoot : boolean) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeDataIndex(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeLnMapPackage(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writePresCondTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeFcTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeTrgOpTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeAbbrTable(initCursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeSclEnum(cursor : Cursor&lt;O&gt;, packageDoc : PackageDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeExplicitClass(cursor : Cursor&lt;O&gt;, doc : ClassDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeClassFromPackage(cursor : Cursor&lt;O&gt;, doc : ClassDoc, headStyle : Style) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> - writeClass(initCursor : Cursor&lt;O&gt;, doc : ClassDoc, headStyle : Style, overwriteHeading : boolean) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeProperties(initCursor : Cursor&lt;O&gt;, doc : PropertiesDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + writeDiagram(cursor : Cursor&lt;O&gt;, doc : FigureDoc) : Cursor&lt;O&gt; </td></tr>
<tr><td align="left" balign="left"> + getInput() : WordWriterInput </td></tr>
<tr><td align="left" balign="left"> + getInputFileNames() : String </td></tr>
<tr><td align="left" balign="left"> + getOutputFileNames() : String </td></tr>
<tr><td align="left" balign="left"> + write() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./AbstractWordWriter.html", fontname="arial", fontcolor="black", fontsize=10.0];
	//org.tanjakostic.jcleancim.docgen.writer.word.WordWriter<O> implements org.tanjakostic.jcleancim.docgen.writer.Writer
	c209919:p -> c209935:p [dir=back,arrowtail=empty,style=dashed];
	//org.tanjakostic.jcleancim.docgen.writer.word.AbstractWordWriter<O> implements org.tanjakostic.jcleancim.docgen.writer.word.WordWriter<O>
	c209935:p -> c209939:p [dir=back,arrowtail=empty,style=dashed];
}

